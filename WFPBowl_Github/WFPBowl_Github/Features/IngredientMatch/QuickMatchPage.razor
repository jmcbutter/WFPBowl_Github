@page "/"
@using System.Collections.ObjectModel
@inject HttpClient Http
@inject IJSRuntime JS

@if (_filter == null || _filter.VisibleIngredients == null)
{
    <div style="background-color:#13232B; position:fixed; top:0; bottom: 0; left:0; right:0; text-align:center;">
        <p style="position:fixed; top:50%; left: 50%; transform:translate(-50%, -50%); color:#E5F9FF">Loading Ingredients...</p>
        <p class=c-text--small style="position:fixed; top:55%; left: 50%; transform:translate(-50%, -50%); color:#E5F9FF">This may take a second</p>
    </div>
}
else
{
    <div class="o-container o-container--sticky o-container--below-header u-pad-over">
        <SearchBar Ingredients="_filter.VisibleIngredients" Search="SearchIngredient" />

        <FilterBlock Filter="ChangeCategory"/>
        <div class="u-pad-over">
            <SelectedIngredients Selected="_filter.Selected" RemoveIngredient="RemoveIngredientFromSelection"/>
        </div>
    </div>
    <div>
        @foreach (Ingredient ingredient in _filter.VisibleIngredients)
        {
            <RatedIngredient Ingredient="ingredient" OnSelected="AddIngredientToSelection"/>
        }
    </div>    
}


@code {
    private IngredientFilter _filter;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            List<Ingredient> ingredients = await Http.GetFromJsonAsync<List<Ingredient>>("ingredients/ingredient-data.json") ?? new List<Ingredient>();
            _filter = new IngredientFilter(ingredients) ?? throw new Exception();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading ingredient data: {ex.Message}");
        }
    }

    private async Task AddIngredientToSelection(Ingredient ingredient)
    {
        ingredient.IsSelected = !ingredient.IsSelected;
        _filter.AddIngredientToSelection(ingredient);
        await JS.InvokeVoidAsync("scrollTop");
        await JS.InvokeVoidAsync("clearSearch");
        SearchIngredient("");
        StateHasChanged();
    }

    private void RemoveIngredientFromSelection(Ingredient ingredient)
    {
        ingredient.IsSelected = !ingredient.IsSelected;
        _filter.RemoveIngredientFromSelection(ingredient);
        StateHasChanged();
    }

    private void ChangeCategory(string category)
    {
        _filter.Category = category;
    }

    private void SearchIngredient(string search)
    {
        _filter.SearchText = search;
    }
}
